'''
@author:     Michael Dickson
@copyright:  2012 InWorldz. All rights reserved.
@license:    Unreleased Source
@contact:    mike.chase@alternatemetaverse.com
@deffield    updated: 2013-1-25
'''

import sys, os, traceback

from optparse import OptionParser
from inworldz.util.filesystem import getCurrentUsersAppDataPath
from inworldz.maestro.version import product_name
from inworldz.maestro.MaestroServer import MaestroServer
from inworldz.maestro.MaestroAuth import AUTH_WINDOWS

import inworldz.util.properties as DefaultProperties

import inworldz.maestro.environment.CredentialCrypt as CredentialCrypt

__all__ = []
__version__ = 0.1
__date__ = '2012-11-14'
__updated__ = '2012-11-14'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

DEFAULT_PORT = 12089

def main(argv=None):
    '''Command line options.'''
    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.8"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright (c) 2015 InWorldz Inc. All Rights Reserved. Released under the Apache 2.0 License"

    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)

        parser.add_option("-a", "--address", dest="address", help="set the address to bind to when starting the server instance [default: %default]")
        parser.add_option("-p", "--port", dest="port", help="set the port to bind to when starting the server instance [default: %default]")
        parser.add_option("-f", "--propfile", dest="propfile", help="specify a properties file to use to define runtime properties [default: %default]")
        parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")

        # set defaults
        props = DefaultProperties.instance()
        appdata = getCurrentUsersAppDataPath()
        parser.set_defaults(address="0.0.0.0", port=DEFAULT_PORT, verbose=1, propfile=props.defaultConfigFilePath)

        # process options
        (opts, args) = parser.parse_args(argv)

        print sys.argv[0]

        if opts.verbose > 0:
            print("verbosity level = %d" % opts.verbose)

        if opts.address and opts.verbose > 0:
            print("address = %s" % opts.address)

        if opts.port and opts.verbose > 0:
            print("port = %s" % opts.port)

        if opts.propfile and opts.verbose > 0:
            print("propfile = %s" % opts.propfile)

        # Load Default Properties
        if (opts.propfile != None):
            props.loadConfiguration(opts.propfile)

        #set encryption key
        CredentialCrypt.SECRET = props.getValue("credential_crypt_secret")
        CredentialCrypt.IV = props.getValue("credential_crypt_iv")

        # Create our server and start this up
        server = MaestroServer(AUTH_WINDOWS, opts.address, opts.port, opts.propfile)

        print "The Maestro service is ready and accepting requests."
        print "To stop the service simply close the console."

        # This will not return until exiting
        server.run()

    except Exception, e:
        sys.stderr.write(traceback.format_exc())
        sys.stderr.write("for help use --help")
        return 2


if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")

    if TESTRUN:
        import doctest
        doctest.testmod()

    if PROFILE:
        import cProfile
        import pstats
        profile_filename = '_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)

    sys.exit(main())
