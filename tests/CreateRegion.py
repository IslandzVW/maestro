'''
from inworldz_api import Session

session = Session('http://localhost:9000/xmlrpc/RemoteAdmin')
session.login_with_password('user', 'password')

result = session.api.Console.Command("show users")
print result

region = session.api.Region.GetByName("Halcyon Test")
print result

session.api.Region.Restart(region)

session.api.session.logout()
'''
import os
import sys
import time
import logging
import pprint

from maestro.rpcclient import Session
from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2012-11-14'
__updated__ = '2012-11-14'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

def main(argv=None):
    '''Command line options.'''
    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright (c) 2015 InWorldz Inc. All Rights Reserved. Released under the Apache 2.0 License"

    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)

        parser.add_option("-p", "--password", dest="password", help="The password to use when connecting to the remote agent [default: %default]")
        parser.add_option("-u", "--username", dest="username", help="The username to use when connecting [default: %default]")
        parser.add_option("-n", "--sim_name", dest="sim_name", help="The name for the Simulator [default: %default]")
        parser.add_option("-x", "--x_loc", dest="x_loc", help="The X coordinate on the map [default: %default]")
        parser.add_option("-y", "--y_loc", dest="y_loc", help="The Y coordiinate on the map [default: %default]")
        parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")

        # set defaults
        parser.set_defaults(password="", username="", verbose=1, sim_name="Test", x_loc="1000", y_loc="1000")

        # process options
        (opts, args) = parser.parse_args(argv)

        if opts.verbose > 0:
            print("verbosity level = %d" % opts.verbose)

        # Set up logging
        logging.basicConfig(level=logging.DEBUG)

        session = Session('http://127.0.0.1:12089/')
        sessionid = session.api.login_with_password(opts.username, opts.password)

        hosts = session.api.RegionHost.get_all()
        pprint.pprint(hosts)

        user = session.api.User.FindByName("Mike", "Chase")
        print "Mike Chase is ", user

        print "Making Estate - The Rift"
        estate = session.api.Estate.create({ 'estate_name' : "The Rift", 'estate_owner' : user})
        estate_id = session.api.Estate.get_estate_id(estate)
        print "The Rift is ", estate

        host = hosts[0]
        print "provisioning region "

        region_record = {
         'sim_name': opts.sim_name,
         'sim_location_x': opts.x_loc,
         'sim_location_y': opts.y_loc,
         'estate_id' : estate_id,
         'owner_uuid' : user,
         'master_avatar_uuid' : user
         }

        region = session.api.RegionHost.ProvisionRegion(host, region_record)
        print region

        #print "Update Region", region_record["sim_name"]
        #print session.api.Region.UpdateToLatest(region)

        print "Reconfigure Region ", region_record["sim_name"]
        print session.api.Region.Reconfigure(region)

        print "Setting region to running ", region_record["sim_name"]
        session.api.Region.ChangeState(region, 1)
        print "Completed"

        session.api.session.logout()

    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(program_name + ": " + str(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2

if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")

    if TESTRUN:
        import doctest
        doctest.testmod()

    if PROFILE:
        import cProfile
        import pstats
        profile_filename = '_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)

    sys.exit(main())
